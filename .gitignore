private void CalculateTheMortgage()
{

// (Loan Value) * (1 + r/12) ^ p = (12x / r) * ((1 + r/12)^p - 1)

// payment = (((Loan Value) * (1 + r/12) ^ p) * r)/ (12 * ((1 + r/12)^p - 1)));

double loanAmount = (double)txtLoanAmount.CurrentValue;                   // price of total mortgage before down payment
double taxesPerYear = (double)txtPropertyTax.CurrentValue;                    // this will divided by 12 and added to the monthly payment
double downPayment = (double)txtDownPayment.CurrentValue;            // down payment will be subtracted from the loan
double interestRate = (double)udInterest.Value / 100;                               // calculate interest from 100%
double termOfLoan = (double)(udTerm.Value * 12);                                  // monthly term
double propertyTax = (double)txtPropertyTax.CurrentValue;  
double insurance = (double)txtInsurance.CurrentValue;

  // plug the values from the input into the mortgage formula

double payment = (loanAmount - downPayment) * (Math.Pow((1 + interestRate/12), termOfLoan) * interestRate)/(12 * (Math.Pow((1+interestRate/12), termOfLoan) - 1));

// add on a monthly property tax and insurance

payment = payment + (propertyTax + insurance) / 12;

  // place the monthly payment calculated into the output text field

txtPayment.CurrentValue = (int)payment;
}
string[] masks = new string[] { "#", "##", "###", "#,###", "##,###", "###,###", "#,###,###", "##,###,###", "###,###,###", "#,###,###,###" };
protected override void OnKeyDown(KeyEventArgs e)
 {
 

   // get the character that was pressed
   char keycode = (char)e.KeyValue;

   // determine if the character pressed was numeric or
   // if the character would go beyond the limit of the largest mask

   if ((!IsNumeric(keycode)) || Text.Length >= masks[masks.Length - 1].Length)
    {
        // if it's not numeric, don't try to handle it
       // and suppress the character so it won't be displayed
       e.Handled = true;

       e.SuppressKeyPress = true;
       if (keycode != '\b')
           {
               // if it's a backspace, we still want to react to the keypress, otherwise return
              return;
           }
    }

  // add the character to the final string if its not a backspace
    if (keycode != '\b')
        {
           Text += keycode;
        }

  // take out all the commas, to get the raw number
       _currentTypedValue = SubtractCommas(Text);

  // handle the backspace by removing the digit at the end of the string
  if (keycode == '\b') // take out a character
   {
       if (SelectionStart >= 0)
         {
               if (_currentTypedValue.Length > 0)
                 {
                    _currentTypedValue = _currentTypedValue.Remove(_currentTypedValue.Length - 1, 1);
                 }
     }

}

  // Put the commas back in the number string using the
  // mask that matches the number string length

   _currentTypedValue = AddCommas(_currentTypedValue);

   // Assign the Text property of the edit box to the
  // comma decorated string
      Text = _currentTypedValue;
      if (Text.Length > 0)
         {
           // select the last character
            Select(Text.Length - 1, 1);
          }

  // mark that we have just handled the key press event
    e.Handled = true;
}
